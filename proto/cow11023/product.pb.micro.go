// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/cow11023/product.proto

//包名

package go_micro_service_product

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Cow11023 service

func NewCow11023Endpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Cow11023 service

type Cow11023Service interface {
	AddProduct(ctx context.Context, in *ProductInfo, opts ...client.CallOption) (*ResponseProduct, error)
}

type cow11023Service struct {
	c    client.Client
	name string
}

func NewCow11023Service(name string, c client.Client) Cow11023Service {
	return &cow11023Service{
		c:    c,
		name: name,
	}
}

func (c *cow11023Service) AddProduct(ctx context.Context, in *ProductInfo, opts ...client.CallOption) (*ResponseProduct, error) {
	req := c.c.NewRequest(c.name, "Cow11023.AddProduct", in)
	out := new(ResponseProduct)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cow11023 service

type Cow11023Handler interface {
	AddProduct(context.Context, *ProductInfo, *ResponseProduct) error
}

func RegisterCow11023Handler(s server.Server, hdlr Cow11023Handler, opts ...server.HandlerOption) error {
	type cow11023 interface {
		AddProduct(ctx context.Context, in *ProductInfo, out *ResponseProduct) error
	}
	type Cow11023 struct {
		cow11023
	}
	h := &cow11023Handler{hdlr}
	return s.Handle(s.NewHandler(&Cow11023{h}, opts...))
}

type cow11023Handler struct {
	Cow11023Handler
}

func (h *cow11023Handler) AddProduct(ctx context.Context, in *ProductInfo, out *ResponseProduct) error {
	return h.Cow11023Handler.AddProduct(ctx, in, out)
}
